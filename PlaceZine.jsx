main();function main(){	//Make certain that user interaction (display of dialogs, etc.) is turned on.	//Display a standard Open File dialog box.	app.scriptPreferences.userInteractionLevel = UserInteractionLevels.interactWithAll;  var format = chooseFormat();	var selectedPDF= File.openDialog("Pick ya pages, nerd");	if ((selectedPDF != "") && (selectedPDF != null)) {        var targetDocument = app.documents.add();        switch (format) {            case "folio short edge":                placeFolioShortEdge(targetDocument, selectedPDF);                break;            case "quarto short edge":                placeQuartoShortEdge(targetDocument,selectedPDF);                break;            case "quarto long edge":                placeQuartoLongEdge(targetDocument, selectedPDF);                break;            case "octavo long edge":                placeOctavoLongEdge(targetDocument, selectedPDF);                break;             case "octavo short edge":                placeOctavoShortEdge(targetDocument, selectedPDF);                break;            default:                alert("Bad format: " + format);        }	}}function rotate(page, degrees) {    var w = Math.abs(page.visibleBounds[3] - page.visibleBounds[1]);    var h = Math.abs(page.visibleBounds[2] - page.visibleBounds[0]);    var translate = Math.abs((h - w) / 2);    var rotation = app.transformationMatrices.add({        counterclockwiseRotationAngle: degrees,    });    page.parent.transform(CoordinateSpaces.pasteboardCoordinates, AnchorPoint.centerAnchor, rotation);    if (degrees == 90 || degrees == 270) {        var translation = app.transformationMatrices.add({            horizontalTranslation: translate * -12,            verticalTranslation: translate * 12,        });        page.parent.transform(CoordinateSpaces.pasteboardCoordinates, AnchorPoint.centerAnchor, translation);    }}function chooseFormat() {    var ZINE_FORMATS = [        "folio short edge",         "quarto short edge",         "quarto long edge",         "octavo long edge",         "octavo short edge"        ];    var selectedFormat = ZINE_FORMATS[0];    var chooseFormatDialog = app.dialogs.add({name: "Choose a zine format", canCancel: false});    with (chooseFormatDialog.dialogColumns.add()) {        with (dialogRows.add()) {            with (dialogColumns.add()) {                var chooseFormatDropdown = dropdowns.add({stringList: ZINE_FORMATS, selectedIndex: 0});            }        }    }    var dialogResultOK = chooseFormatDialog.show();    if (dialogResultOK) {        selectedFormat = ZINE_FORMATS[chooseFormatDropdown.selectedIndex];    } else {    }    chooseFormatDialog.destroy();    return selectedFormat;}function placeFolioShortEdge(target, PDF) {     app.pdfPlacePreferences.pdfCrop = PDFCrop.cropTrim;    var pageToPlaceIndex = 1;    var morePages = true;    var p0 = target.pages.item(0);    var p1 = target.pages.add(LocationOptions.after, p0);    var w = p0.bounds[3];    var h = p0.bounds[2];    var coords = [        [0,0],         [0, h/2],    ];    var pages = [p0, p1];    var pdfPage;    function place(i, y, rotation) {        var placedData = pages[i].place(File(PDF), coords[y]);        pdfPage = placedData[0];        rotate(pdfPage, rotation);    }    while (morePages) {        app.pdfPlacePreferences.pageNumber = pageToPlaceIndex;         var i = (pageToPlaceIndex - 1) % 4;        switch (i) {            case 0:                place(0, 1, 0);                break;            case 1:                place(1, 1, 0);                break;            case 2:                place(1, 0, 180);                break;            case 3:                place(0, 0, 180);                break;        }        if (pdfPage.pdfAttributes.pageNumber == 1 && pageToPlaceIndex != 1) {            morePages = false;             if (i == 0) {                 p0.remove();                 p1.remove();             } else if (i < 2) {                 p1.remove();             }            break;        }        pageToPlaceIndex += 1;        // add two more pages for the next signature        if (i == 3) {            p0 = target.pages.add(LocationOptions.after, p1);            p1 = target.pages.add(LocationOptions.after, p0);            pages = [p0, p1];        }    }}function placeQuartoShortEdge(target, PDF) {  app.pdfPlacePreferences.pdfCrop = PDFCrop.cropTrim;    var pageToPlaceIndex = 1;    var morePages = true;    var p0 = target.pages.item(0);    var p1 = target.pages.add(LocationOptions.after, p0);    var w = p0.bounds[3];    var h = p0.bounds[2];    var coords = [                  [[0,0], [0, h/2]],                   [[w/2,0], [w/2, h/2]]                 ];    var pages = [p0, p1];    var pdfPage;    function place(i, x, y, rotation) {        var placedData = pages[i].place(File(PDF), coords[x][y]);        pdfPage = placedData[0];        rotate(pdfPage, rotation);    }    while (morePages) {        app.pdfPlacePreferences.pageNumber = pageToPlaceIndex;         var i = (pageToPlaceIndex - 1) % 8;        switch (i) {            case 0:                place(0, 0, 1, 270);                break;            case 1:                place(1, 1, 1, 90);                break;            case 2:                place(1, 0, 1, 270);                break;            case 3:                place(0, 1, 1, 90);                break;            case 4:                place(0, 1, 0, 90);                break;            case 5:                place(1, 0, 0, 270);                break;            case 6:                place(1, 1, 0, 90);                break;            case 7:                place(0, 0, 0, 270);                break;        }    /*    long edge printing    */        if (pdfPage.pdfAttributes.pageNumber == 1 && pageToPlaceIndex != 1) {            morePages = false;             if (i == 0) {                 p0.remove();                 p1.remove();             } else if (i < 4) {                 p1.remove();             }            break;        }        pageToPlaceIndex += 1;        // add two more pages for the next signature        if (i == 7) {            p0 = target.pages.add(LocationOptions.after, p1);            p1 = target.pages.add(LocationOptions.after, p0);            pages = [p0, p1];        }    }}function placeQuartoLongEdge(target, PDF) {	app.pdfPlacePreferences.pdfCrop = PDFCrop.cropTrim;    /*    long edge printing    0: p1 bottom right    1: p2 bottom left    2: p2 top left rotate180d 180    3: p1 top right rotate180d 180    4: p1 top left rotate180d 180    5: p2 top right rotate180d 180    6: p2 bottom right    7: p1 bottom left    */    var pageToPlaceIndex = 1;    var morePages = true;    var p1 = target.pages.item(0);    var p2 = target.pages.add(LocationOptions.after, p1);    var w = p1.bounds[3];    var h = p1.bounds[2];    var coords = { "bottom" : { "left" : [0, h / 2], "right" : [w / 2, h / 2] },                   "top"    : { "left" : [0, 0], "right" : [w / 2, 0] }};    while (morePages) {        app.pdfPlacePreferences.pageNumber = pageToPlaceIndex;         var i = (pageToPlaceIndex - 1) % 8;        switch (i) {            case 0:                var pdfPage = p1.place(File(PDF), coords.bottom.right)[0];                break;            case 1:                var pdfPage = p2.place(File(PDF), coords.bottom.left)[0];                break;            case 2:                var pdfPage = p2.place(File(PDF), coords.top.left)[0];                rotate(pdfPage, 180);                break;            case 3:                var pdfPage = p1.place(File(PDF), coords.top.right)[0];                rotate(pdfPage, 180);                break;            case 4:                var pdfPage = p1.place(File(PDF), coords.top.left)[0];                rotate(pdfPage, 180);                break;            case 5:                var pdfPage = p2.place(File(PDF), coords.top.right)[0];                rotate(pdfPage, 180);                break;            case 6:                var pdfPage = p2.place(File(PDF), coords.bottom.right)[0];                break;            case 7:                var pdfPage = p1.place(File(PDF), coords.bottom.left)[0];                break;        }        if (pdfPage.pdfAttributes.pageNumber == 1 && pageToPlaceIndex != 1) {            morePages = false;             if (i == 0) {                 p1.remove();                 p2.remove();             } else if (i < 4) {                 p2.remove();             }            break;        }        pageToPlaceIndex += 1;        // add two more pages for the next signature        if (i == 7) {            p1 = target.pages.add(LocationOptions.after, p2);            p2 = target.pages.add(LocationOptions.after, p1);        }    }}function placeOctavoLongEdge(target, PDF) {	app.pdfPlacePreferences.pdfCrop = PDFCrop.cropTrim;    var pageToPlaceIndex = 1;    var morePages = true;    var p0 = target.pages.item(0);    var p1 = target.pages.add(LocationOptions.after, p0);    var w = p0.bounds[3];    var h = p0.bounds[2];    var coords = [                  [[0,0], [0, h/4], [0, h/2], [0, 3*h/4]],                   [[w/2,0], [w/2, h/4], [w/2, h/2], [w/2, 3*h/4]]                 ];    var pages = [p0, p1];    var pdfPage;    function place(i, x, y, rotation) {        var placedData = pages[i].place(File(PDF), coords[x][y]);        pdfPage = placedData[0];        rotate(pdfPage, rotation);    }    while (morePages) {        app.pdfPlacePreferences.pageNumber = pageToPlaceIndex;         var i = (pageToPlaceIndex - 1) % 16;        switch (i) {            case 0:                place(0, 0, 1, 270);                break;            case 1:                place(1, 1, 1, 90);                break;            case 2:                place(1, 1, 2, 90);                break;            case 3:                place(0, 0, 2, 270);                break;            case 4:                place(0, 1, 2, 90);                break;            case 5:                place(1, 0, 2, 270);                break;            case 6:                place(1, 0, 1, 270);                break;            case 7:                place(0, 1, 1, 90);                break;            case 8:                place(0, 1, 0, 90);                break;            case 9:                place(1, 0, 0, 270);                break;            case 10:                place(1, 0, 3, 270);                break;            case 11:                place(0, 1, 3, 90);                break;            case 12:                place(0, 0, 3, 270);                break;            case 13:                place(1, 1, 3, 90);                break;            case 14:                place(1, 1, 0, 90);                break;            case 15:                place(0, 0, 0, 270);                break;        }    /*    long edge printing    <index> : <page number> <x-coord> <y-coord> <rotation>     0  : 0, 0, 1, 90    1  : 1, 1, 1, 270    2  : 1, 1, 2, 270    3  : 0, 0, 2, 90    4  : 0, 1, 2, 270    5  : 1, 0, 2, 90    6  : 1, 0, 3, 90    7  : 0, 1, 1, 270    8  : 0, 1, 0, 270    9  : 1, 0, 0, 90    10 : 1, 0, 3, 90    11 : 0, 1, 3, 270    12 : 0, 0, 3, 90    13 : 1, 1, 3, 270    14 : 1, 1, 0, 270    15 : 0, 0, 0, 90    */        if (pdfPage.pdfAttributes.pageNumber == 1 && pageToPlaceIndex != 1) {            morePages = false;             if (i == 0) {                 // p0.remove();                 // p1.remove();             } else if (i < 8) {                 // p1.remove();             }            break;        }        pageToPlaceIndex += 1;        // add two more pages for the next signature        if (i == 15) {            p0 = target.pages.add(LocationOptions.after, p1);            p1 = target.pages.add(LocationOptions.after, p0);            pages = [p0, p1];        }    }}function placeOctavoShortEdge(target, PDF) {	app.pdfPlacePreferences.pdfCrop = PDFCrop.cropTrim;    var pageToPlaceIndex = 1;    var morePages = true;    var p0 = target.pages.item(0);    var p1 = target.pages.add(LocationOptions.after, p0);    var w = p0.bounds[3];    var h = p0.bounds[2];    var coords = [                  [[0,0], [0, h/4], [0, h/2], [0, 3*h/4]],                   [[w/2,0], [w/2, h/4], [w/2, h/2], [w/2, 3*h/4]]                 ];    var pages = [p0, p1];    var pdfPage;    function place(i, x, y, rotation) {        var placedData = pages[i].place(File(PDF), coords[x][y]);        pdfPage = placedData[0];        rotate(pdfPage, rotation);    }    while (morePages) {        app.pdfPlacePreferences.pageNumber = pageToPlaceIndex;         var i = (pageToPlaceIndex - 1) % 16;        switch (i) {            case 0:                place(0, 1, 3, 0);                break;            case 1:                place(1, 0, 3, 0);                break;            case 2:                place(1, 0, 0, 180);                break;            case 3:                place(0, 1, 0, 180);                break;            case 4:                place(0, 1, 1, 0);                break;            case 5:                place(1, 0, 1, 0);                break;            case 6:                place(1, 0, 2, 180);                break;            case 7:                place(0, 1, 2, 180);                break;            case 8:                place(0, 0, 2, 180);                break;            case 9:                place(1, 1, 2, 180);                break;            case 10:                place(1, 1, 1, 0);                break;            case 11:                place(0, 0, 1, 0);                break;            case 12:                place(0, 0, 0, 180);                break;            case 13:                place(1, 1, 0, 180);                break;            case 14:                place(1, 1, 3, 0);                break;            case 15:                place(0, 0, 3, 0);                break;        }        if (pdfPage.pdfAttributes.pageNumber == 1 && pageToPlaceIndex != 1) {            morePages = false;             if (i == 0) {                 p0.remove();                 p1.remove();             } else if (i < 8) {                 // p1.remove();             }            break;        }        pageToPlaceIndex += 1;        // add two more pages for the next signature        if (i == 15) {            p0 = target.pages.add(LocationOptions.after, p1);            p1 = target.pages.add(LocationOptions.after, p0);            pages = [p0, p1];        }    }}